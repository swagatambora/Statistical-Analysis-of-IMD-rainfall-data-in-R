qlist<-list(qd,qm,qy)
title(sub = paste( "Q-Q Plot of daily" ,deparse(substitute(dailydata))))
return(qlist)
}
qNZ<-quantileplots(monthNZ,yearlyNZ,Nizambad)
qJG<-quantileplots(monthJG,yearlyJG,Jagtial)
qJB<-quantileplots(monthJB,yearlyJB,Jayashankar_Bhupalpally)
qKN<-quantileplots(monthKN,yearlyKN,Karimnagar)
qPP<-quantileplots(monthPP,yearlyPP,Pedapalli)
second_max <- function(x) {
sorted_x <- sort(x, decreasing = TRUE)
if (length(sorted_x) >= 2) {
return(sorted_x[2])
}
}
tablemax<- function(data){
data$year<- strftime(data$DateTime, '%Y')
result <- aggregate(rainfall ~ year, data = data, FUN = function(x) c(Maximum = max(x), Second_Maximum = second_max(x)))
result$year<-as.numeric(result$year)
return(result)
}
plotmax<- function(result){
ggplot(result, aes(x = year)) +  geom_line(aes(y =rainfall[,"Maximum"] , color = "Maximum",group=1), size = 1) +  geom_line(aes(y =  rainfall[,"Second_Maximum"], color = "Second Maximum", group=2), size = 1) +  scale_color_manual(values = c("Maximum" = "red", "Second Maximum" = "blue")) +  labs(x = "Year", y = "RAINFALL", color = "Legend") +  theme_minimal()+ scale_x_continuous(breaks = seq(1950,2021,by=10))+ggtitle(paste("First max and Second max",deparse(substitute(result))))
}
maxNZ<- tablemax(Nizambad)
pmaxNZ<- plotmax(maxNZ)
print(pmaxNZ)
maxJG<- tablemax(Jagtial)
pmaxJG<- plotmax(maxJG)
print(pmaxJG)
maxJB<- tablemax(Jayashankar_Bhupalpally)
pmaxJB<- plotmax(maxJB)
print(pmaxJB)
maxKN<- tablemax(Karimnagar)
pmaxKN<- plotmax(maxKN)
print(pmaxKN)
maxPP<- tablemax(Pedapalli)
pmaxPP<- plotmax(maxPP)
print(pmaxPP)
#correlation between first and second max.
corr<-function(x){
c<-cor(x$rainfall[,"Maximum"], x$rainfall[,"Second_Maximum"])
return(c)
}
#probability
calculate_yearly_rainfall_probability <- function(rainfall_data) {
# Extract the year from the date
rainfall_data$year <- strftime(rainfall_data$DateTime, "%Y")
# Calculate the probability of rainfall for each year
probability_by_year <- aggregate(rainfall_data$rainfall > 0, by = list(year = rainfall_data$year), FUN = mean)
# Rename the columns for clarity
colnames(probability_by_year) <- c("Year", "RainfallProbability")
return(probability_by_year)
}
NZprob<- calculate_yearly_rainfall_probability(Nizambad)
ggplot(NZprob, aes(Year,RainfallProbability, group=1))+geom_line()+ geom_point()+ggtitle('Nizambad probability')
JGprob<- calculate_yearly_rainfall_probability(Jagtial)
ggplot(JGprob, aes(Year,RainfallProbability, group=1))+geom_line()+ geom_point()+ggtitle('Jagtiyal probability')
JBprob<- calculate_yearly_rainfall_probability(Jayashankar_Bhupalpally)
ggplot(JBprob, aes(Year,RainfallProbability, group=1))+geom_line()+ geom_point()+ggtitle('Jayashankar Bhupalpally probability')
KNprob<- calculate_yearly_rainfall_probability(Karimnagar)
ggplot(KNprob, aes(Year,RainfallProbability, group=1))+geom_line()+ geom_point()+ggtitle('Karimnagar probability')
PPprob<- calculate_yearly_rainfall_probability(Pedapalli)
ggplot(PPprob, aes(Year,RainfallProbability, group=1))+geom_line()+ geom_point()+ggtitle('Pedapalli probability')
cor1to1<-function(x,y){
one2one_dist<-cor(x$rainfall,y$rainfall)
return(one2one_dist)
}
#Correlation Matrix of all dist.
library(corrplot)
combined_data<-as.data.frame(cbind(Nizambad$rainfall,Jagtial$rainfall,Jayashankar_Bhupalpally$rainfall,Karimnagar$rainfall,Pedapalli$rainfall))
colnames(combined_data)<-c("Nizambad",'Jagtial',"Jayashankar_Bhupalpally","Karimnagar","Pedapalli")
combinedcor<-cor(combined_data)
corrplot(combinedcor,method="number")
# Scatter plot with trend line for yearly data
ggplot(combined_data, aes(x = Nizambad, y = Jagtial)) + geom_point() + geom_smooth(method = "lm", color = "blue") +
labs(title = "Scatter Plot and Trend Line")
lmao<- data.frame()
lmao<- as.data.frame(cbind(yearlyJG$year, yearlyNZ$rainfall, yearlyJG$rainfall))
colnames(lmao)<- c('year', 'Nizambad', 'Jagtial')
# Perform the Mann-Kendall test
mk_test_result <- cor.test(yearlyJG$rainfall, yearlyNZ$rainfall, method = "kendall")
# Print the test result
print(mk_test_result)
# extraction of the monsoon or summer values
Summer<-function(data){
summer_data <- data[data$Season == "Summer", c("Year", "TotalRainfall")]
return(summer_data)
}
summerNz<-Summer(seasonalNZ)
summerJG<- Summer(seasonalJG)
summerJB<- Summer(seasonalJB)
summerKN<- Summer(seasonalKN)
summerPP<- Summer(seasonalPP)
#statsforseasons
statseas<-function(x){
m<-statistics(x)
m<-m[1,]
m[1,1]<-deparse(substitute(x))
return(m)
}
seas<-statseas(summerNz)
#plotfunction
monsoonplot<-function(x){
variable_name <- deparse(substitute(x))
ggplot(x, aes(x = Year, y = TotalRainfall)) +
geom_line(color = "red",size=1) +
geom_point(color = "blue", size = 1)+
ggtitle(bquote(paste("Rainfall Over the Years - ", .(variable_name))))+
xlab("Year") +
ylab("Rainfall (mm)")+scale_x_continuous(breaks = seq(1950,2021,by=5))
}
print(monsoonplot(summerNz))
print(monsoonplot(summerJG))
View(tableNZ)
View(statTable)
print(monsoonplot(summerJB))
print(monsoonplot(summerKN))
print(monsoonplot(summerPP))
install.packages('forecast')
library(forecast)
acf(yearlyNZ$rainfall,main= '"Autocorrelation Function (ACF)"')
combine_riyal<- as.data.frame(cbind(Date=Nizambad$DateTime, combined_data))
SD1<- scale(combine_riyal[,2:6], center = TRUE, scale=TRUE)
y<- cov.wt(SD1)
R <- princomp(combine_riyal[,2:6], scores = TRUE, covmat = y)
v<- ((R$sdev^2)/4)*100
barplot(v, ylim = c(0, 110), col='skyblue')
text(x = barplot(v, plot = FALSE), y = v + 1, label =round(v), pos = 3, cex = 0.8, col = "black")
library(dplyr)
classify_rainfall <- function(rainfall_rate) {
if (rainfall_rate >= 0.25 & rainfall_rate < 2.5) {
return("Light Rain")
} else if (rainfall_rate >= 2.5 & rainfall_rate < 7.6) {
return("Moderate Rain")
} else if (rainfall_rate >= 7.6 & rainfall_rate < 25) {
return("Heavy Rain")
} else if (rainfall_rate >= 25 & rainfall_rate < 50) {
return("Very Heavy Rain")
} else if(rainfall_rate >=50){
return("Extreme Rain")
}else{
return('No Rain')
}
}
# Apply the classification function to the 'rainfall' column
rainfall_data <- Nizambad %>%
mutate(Classification = sapply(rainfall, classify_rainfall))
ggplot(rainfall_data, aes(x = Classification, fill=Classification )) +
geom_bar( color = "black") + scale_fill_brewer(palette = "Set3")+
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
labs(title = "Rainfall Classification Distribution for Nizambad",
x = "Rainfall Classification",
y = "Frequency") +
theme_minimal()
rainfall_data2 <- Jagtial %>%
mutate(Classification = sapply(rainfall, classify_rainfall))
ggplot(rainfall_data2, aes(x = Classification, fill=Classification )) +
geom_bar( color = "black") + scale_fill_brewer(palette = "Set3")+
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
labs(title = "Rainfall Classification Distribution for Jagtial",
x = "Rainfall Classification",
y = "Frequency") +
theme_minimal()
rainfall_data3 <- Jayashankar_Bhupalpally %>%
mutate(Classification = sapply(rainfall, classify_rainfall))
ggplot(rainfall_data3, aes(x = Classification, fill=Classification )) +
geom_bar( color = "black") + scale_fill_brewer(palette = "Set3")+
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
labs(title = "Rainfall Classification Distribution for Jayashankar_Bhupalpally", x = "Rainfall Classification", y = "Frequency") +
theme_minimal()
rainfall_data4 <- Karimnagar %>%
mutate(Classification = sapply(rainfall, classify_rainfall))
ggplot(rainfall_data4, aes(x = Classification, fill=Classification )) +
geom_bar( color = "black") + scale_fill_brewer(palette = "Set3")+
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
labs(title = "Rainfall Classification Distribution for Karimnagar",
x = "Rainfall Classification",
y = "Frequency") +
theme_minimal()
rainfall_data5 <- Pedapalli %>%
mutate(Classification = sapply(rainfall, classify_rainfall))
ggplot(rainfall_data5, aes(x = Classification, fill=Classification )) +
geom_bar( color = "black") + scale_fill_brewer(palette = "Set3")+
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
labs(title = "Rainfall Classification Distribution for Pedapalli",
x = "Rainfall Classification",
y = "Frequency") +
theme_minimal()
#SPATIAL PLOTS______________________________
library(readxl)
library(ggplot2)
csv_files <- list.files(path = "C:/Users/user/Desktop/r term project", pattern = ".csv", full.names = TRUE)
allfiles <- list()
# Loop through the list of CSV files and read each file
for (csv_file in csv_files) {
data <- read.csv(csv_file)
data$latitude<- as.numeric(sub("^X([0-9]+\\.[0-9]+).*", "\\1", colnames(data)[2]))
data$longitude<- as.numeric(sub("^X[0-9.]+\\.([0-9]+\\.[0-9]+)$", "\\1", colnames(data)[2]))
colnames(data)[2]<- 'Rainfall'
allfiles[[csv_file]] <- data
}
#mean
meanrain<- data.frame()
for (i in seq_along(allfiles)){
meanR<- mean(allfiles[[i]]$Rainfall)
meanra<-unique(data.frame(Mean= meanR, latitude=allfiles[[i]]$latitude, longitude= allfiles[[i]]$longitude))
meanrain<- rbind(meanrain, meanra)
}
library(ggplot2)
library(sf)
# Sample data frame with latitude, longitude, and rainfall
# Create an sf data frame
sf_data <- st_as_sf(meanrain, coords = c("longitude", "latitude"), crs = 4326)
# Plot the spatial data using ggplot2
ggplot() +
geom_sf(data = sf_data, aes(color = Mean), size = 2) +
scale_color_gradient(name = "Mean Rainfall", low = "orange", high = "blue") +
labs(title = "Spatial Plot of Mean Rainfall Data")
#for SD
sdrain<- data.frame()
for (i in seq_along(allfiles)){
sdR<- sd(allfiles[[i]]$Rainfall)
sdra<-unique(data.frame(SD= sdR, latitude=allfiles[[i]]$latitude, longitude= allfiles[[i]]$longitude))
sdrain<- rbind(sdrain, sdra)
}
sf_data2 <- st_as_sf(sdrain, coords = c("longitude", "latitude"), crs = 4326)
# Plot the spatial data using ggplot2
ggplot() +
geom_sf(data = sf_data2, aes(color = SD), size = 2) +
scale_color_gradient(name = "SD Rainfall", low = "orange", high = "blue") +
labs(title = "Spatial Plot of SD Rainfall Data")
#Skewness
library(e1071)
skrain<- data.frame()
for (i in seq_along(allfiles)){
skR<- skewness(allfiles[[i]]$Rainfall)
skra<-unique(data.frame(SK= skR, latitude=allfiles[[i]]$latitude, longitude= allfiles[[i]]$longitude))
skrain<- rbind(skrain, skra)
}
sf_data3 <- st_as_sf(skrain, coords = c("longitude", "latitude"), crs = 4326)
# Plot the spatial data using ggplot2
ggplot() +
geom_sf(data = sf_data3, aes(color = SK), size = 2) +
scale_color_gradient(name = "Skewness Rainfall", low = "orange", high = "blue") +
labs(title = "Spatial Plot of Skewness Rainfall Data")
#kurtosis
kurrain<- data.frame()
for (i in seq_along(allfiles)){
kR<- kurtosis(allfiles[[i]]$Rainfall)
kra<-unique(data.frame(KUR= kR, latitude=allfiles[[i]]$latitude, longitude= allfiles[[i]]$longitude))
kurrain<- rbind(kurrain, kra)
}
sf_data4 <- st_as_sf(kurrain, coords = c("longitude", "latitude"), crs = 4326)
# Plot the spatial data using ggplot2
ggplot() +
geom_sf(data = sf_data4, aes(color = KUR), size = 2) +
scale_color_gradient(name = "Kurtosis Rainfall", low = "orange", high = "blue") +
labs(title = "Spatial Plot of kurtosis Rainfall Data")
ggplot(combined_data, aes(x = Nizambad, y = Jayashankar_Bhupalpally)) + geom_point() + geom_smooth(method = "lm", color = "blue") +
labs(title = "Scatter Plot and Trend Line")
ggplot(combined_data, aes(x = Nizambad, y = Karimnagar)) + geom_point() + geom_smooth(method = "lm", color = "blue") +
labs(title = "Scatter Plot and Trend Line")
ggplot(combined_data, aes(x = Nizambad, y = Pedapalli)) + geom_point() + geom_smooth(method = "lm", color = "blue") +
labs(title = "Scatter Plot and Trend Line")
#correlation between first and second max.
corr<-function(x){
c<-cor(x$rainfall[,"Maximum"], x$rainfall[,"Second_Maximum"])
return(c)
}
View(maxJB)
corr(maxJB)
corr(maxJG)
corr(maxKN)
corr(maxNZ)
corr(maxPP)
mk_test_result2 <- cor.test(yearlyPP$rainfall, yearlyKN$rainfall, method = "kendall")
# Print the test result
print(mk_test_result)
# Print the test result
print(mk_test_result2)
observed_data <- Nizambad$rainfall
chi_square_test <- chisq.test(table(cut(observed_data, breaks = "Sturges")), p = pnorm(unique(observed_data)))
observed_data <- Nizambad$rainfall
chi_square_test <- chisq.test(table(cut(observed_data)), p = pnorm(unique(observed_data)))
chi_square_test <- chisq.test(table(cut(observed_data, breaks = "Sturges")), p = pnorm(unique(observed_data)))
observed_data <- as.numeric(Nizambad$rainfall)
chi_square_test <- chisq.test(table(cut(observed_data, breaks = "Sturges")), p = pnorm(unique(observed_data)))
# Convert your data to a numeric vector
observed_data <- as.numeric(as.character(Nizambad$rainfall))
# Perform a chi-square goodness-of-fit test
chi_square_test <- chisq.test(table(cut(observed_data, breaks = "Sturges")), p = pnorm(unique(observed_data)))
# Convert your data to a numeric vector
observed_data <- as.numeric(as.character(Nizambad$rainfall))
# Determine breaks for the chi-square test
breaks <- seq(min(observed_data), max(observed_data), length.out = "Sturges")
# Perform a chi-square goodness-of-fit test
chi_square_test <- chisq.test(table(cut(observed_data, breaks = breaks)), p = pnorm(unique(observed_data)))
# Convert your data to a numeric vector
observed_data <- as.numeric(as.character(Nizambad$rainfall))
# Determine breaks for the chi-square test
breaks <- seq(min(observed_data), max(observed_data), length.out = nclass.Sturges(observed_data))
# Perform a chi-square goodness-of-fit test
chi_square_test <- chisq.test(table(cut(observed_data, breaks = breaks)), p = pnorm(unique(observed_data)))
# Perform a chi-square goodness-of-fit test
chi_square_test <- chisq.test(table(cut(observed_data, breaks = breaks)), p = pnorm(observed_data))
your_variable <- Nizambad$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
library(MASS)
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(your_variable, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
your_variable <- Nizambad$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(your_variable, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Nizambad")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
your_variable <- monthNZ$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(your_variable, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Nizambad")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
your_variable <- yearlyNZ$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(your_variable, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Nizambad")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
Rainfall_mm <- yearlyNZ$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(your_variable, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Nizambad")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
# Plot the histogram of the data and the fitted normal distribution
hist(Rainfall_mm, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Nizambad")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
Rainfall_mm <- yearlyJG$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(Rainfall_mm, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Jagtiyal")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
Rainfall_mm <- yearlyJB$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(Rainfall_mm, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Jayashankar_Bhupalpally")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
Rainfall_mm <- yearlyKN$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(Rainfall_mm, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Karimnagar")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
Rainfall_mm <- yearlyPP$rainfall
# Fit a normal distribution
fit <- fitdistr(your_variable, "normal")
# Print the estimated mean and standard deviation
cat("Estimated mean:", fit$estimate[1], "\n")
cat("Estimated standard deviation:", fit$estimate[2], "\n")
# Plot the histogram of the data and the fitted normal distribution
hist(Rainfall_mm, probability = TRUE, col = "lightblue", main = "Fitted Normal Distribution For Pedapalli")
curve(dnorm(x, mean = fit$estimate[1], sd = fit$estimate[2]), add = TRUE, col = "darkred", lwd = 2)
#statsforseasons
statseas<-function(x){
m<-statistics(x)
m<-m[1,]
m[1,1]<-deparse(substitute(x))
return(m)
}
statseas(summerNz)
sumstat<-cbind(statseas(summerNz), statseas(summerJB))
View(sumstat)
sumstat<-rbind(statseas(summerNz), statseas(summerJB))
sumstat<-rbind(statseas(summerNz), statseas(summerJG),statseas(summerJB),statseas(summerKN),statseas(summerPP))
acf(yearlyJG$rainfall,main= '"Autocorrelation Function (ACF)"')
acf(yearlyJB$rainfall,main= '"Autocorrelation Function (ACF)"')
acf(yearlyKN$rainfall,main= '"Autocorrelation Function (ACF)"')
acf(yearlyPP$rainfall,main= '"Autocorrelation Function (ACF)"')
t_test_result <- t.test(yearlyNZ$rainfall, yearlyJB$rainfall)
print(t_test_result)
t_test_result <- t.test(yearlyNZ$rainfall, yearlyJG$rainfall)
print(t_test_result)
# Extract only the columns with rainfall data
rainfall_cols <- combine_riyal[, 2:6]
# Perform PCA
pca_result <- prcomp(rainfall_cols, center = TRUE, scale. = TRUE)
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red", geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "all", repel = TRUE) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
install.packages(c("tidyverse", "factoextra"))
library(tidyverse)
library(tidyverse)
install.packages(c("tidyverse", "factoextra"))
library(tidyverse)
library(factoextra)
# Perform PCA
pca_result <- prcomp(rainfall_cols, center = TRUE, scale. = TRUE)
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red", geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "all", repel = TRUE) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red",lwd.var=3, geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "all", repel = TRUE) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red",lwd.var='3', geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "all", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
View(rainfall_cols)
library(ggrepel)
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red",lwd.var='3', geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "all", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red", geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "var", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "lightblue", geom.ind = "point",
col.var = "red", geom.var = "arrow", alpha.var = 0.5,
addEllipses = TRUE, label = "var", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "purple", geom.ind = "point",
col.var = "red", geom.var = "text", alpha.var = 0.5,
addEllipses = TRUE, label = "var", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
# Visualize PCA results using ggplot2
fviz_pca_biplot(pca_result, col.ind = "blue", geom.ind = "point",
col.var = "red", geom.var = c("text","arrow"), alpha.var = 0.5,
addEllipses = TRUE, label = "var", repel = TRUE, label.var= colnames(rainfall_cols)) +
theme_minimal() +
ggtitle("PCA of Daily Rainfall Data for 5 Districts")
acf(yearlyNZ$rainfall,main= '"Autocorrelation Function (ACF) Nizambad"')
acf(yearlyJG$rainfall,main= '"Autocorrelation Function (ACF) Jagtiyal"')
acf(yearlyJB$rainfall,main= '"Autocorrelation Function (ACF) Jayashankar_Bhupalpally"')
acf(yearlyKN$rainfall,main= '"Autocorrelation Function (ACF) Karimnagar"')
acf(yearlyPP$rainfall,main= '"Autocorrelation Function (ACF) Pedapalli"')
library(Kendall)
#mk test__________________________________________
mk_test_results <- kendall.test(yearlyNZ)
install.packages("Kendall")
install.packages("Kendall")
library(Kendall)
#mk test__________________________________________
mk_test_results <- kendall.test(yearlyNZ)
print(mk_test_result)
#mk test__________________________________________
mk_test_results <- kendall.test(yearlyNZ)
print(mk_test_results)
Kendall::Kendall(yearlyJB)
Kendall::MannKendall(yearlyJB)
Kendall::MannKendall(yearlyJB$rainfall)
#mk test__________________________________________
mk_test_results <- kendall.test(yearlyNZ)
#mk test__________________________________________
mk_test_results <- kendall.test(yearlyNZ$rainfall)
print(mk_test_results)
v
v<- ((R$sdev^2)/5)*100
barplot(v, ylim = c(0, 110), col='skyblue')
text(x = barplot(v, plot = FALSE), y = v + 1, label =round(v), pos = 3, cex = 0.8, col = "black")
barplot(v, ylim = c(0, 100), col='skyblue')
text(x = barplot(v, plot = FALSE), y = v + 1, label =round(v), pos = 3, cex = 0.8, col = "black")
